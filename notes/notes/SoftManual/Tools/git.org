* 概念
* 特殊变量
** HEAD
   用来标识当前分支的最后一个版本
   搭配使用的特殊字符 "^" 和 "~"
   |---+-------------------------------------------------------------------|
   | ~ | 向前追溯N 个父版本，即取父版本的父版本的...                       |
   | ^ | 横向对比父版本 x 和父版本 y ，即当前版本由2个或多个分支合并得到时 |
   |---+-------------------------------------------------------------------|
** --
   用来标识cache
* 配置
** 忽略文件或目录
   git可以将忽略信息存储到一个文件中，每行代表一条规则；
   一般文件名为~/.gitglobalignore
   语法规则，总体遵循glob，行尾为'/'，则只匹配目录；
   对于各类需要忽略文件的情况，有一份github：https://github.com/github/gitignore
   |----------------+------------------------------|
   | 忽略C\C++相关  | *.o *.lo *.la *.a *.so[0-9]* |
   | 忽略Python相关 | *.pyc *.pyo *.pyd            |
   | 忽略svn        | .svn/                        |
   |----------------+------------------------------|
* 实际用法示例
** 比较
*** 比较当前版本和某个版本
    假设，版本号为rev2，则比较当前版本和rev2，可以用以下两种方式：
    git diff HEAD rev2
    或者省略模式
    git diff rev2
*** 根据版本号比较两个版本
    假设，版本号为 rev1 和 rev2 ，则比较命令为：
    git diff rev1 rev2
*** 比较当前版本和上Ｎ个版本
    假设，需要比较当前版本和向前回溯的3个版本
    git diff HEAD HEAD~3
*** 比较某个文件或目录
    假设，版本号为 rev1 和 rev2 ，则比较命令为：
    git diff rev1 rev2 file_path
    git diff rev1 rev2 folder_path
*** 比较两个分支
    假设，分支为 master 和 test ，则比较命令为：
    git diff master..test
*** 比较 work 和 cache （或当前分支最新版本或某个分支最新版本)
    假设，其他分支名为test，则比较命令分别为：
    git diff
    git diff HEAD
    git diff test
    在cache无数据的情况下，比较work和当前分支最新版本：
    git diff
*** 比较 cache 和当前分支（或某个分支）
    假设，其他分支名为test，则比较命令分别为：
    git diff --cached 或 git diff --cached HEAD
    git diff --cached test
*** 只查看统计信息，不显示具体diff的内容
    git diff --stat rev1 rev2
