* Brand Server的触发和过滤逻辑开发
** 概念描述
品牌广告是投放到固定广告位，根据CPT或CPM结算的广告。
CPT广告：一段时间内会独占某个广告位。
CPM广告：一段时间内会和其他CPM广告，共享某个广告位。

媒体资源：
    分为三种：充电屏保、浏览器顶部banner、UC Browser信息流和UC News信息流
    当媒体资源为信息流时，会带有频道信息，且印度和印尼的频道信息定义是不同的
** 业务逻辑描述
可以根据广告位slot id，获取所有投放在该广告位的广告，然后经过合约状态、合约起止时间、地域、语言、时段、GAID
媒体需要取出的属性为：媒体资源类型、频道、地域、语言、
广告需要取出的属性为：
*** 合约层级
    合约状态  => 状态定义
    合约的起止时间 => 账号层级
    账号余额
*** 

    - Note taken on [2017-06-28 三 17:50]
    有疑问的地方：
***

** 概念介绍
   品牌广告，是以曝光为目的的广告，主要计费模式为CPT（按时间计费）和CPM（按千次展现计费）。
   品牌广告，一般都是投向特定的广告位。
   CPT广告，会独占某个广告位；CPM广告，可以和其他CPM广告共享某个广告位。
** 业务逻辑
   汇川品牌广告的媒体源，有三个：充电锁屏、浏览器顶部banner、UC Browser信息流和UC News信息流
   汇川品牌广告在展现时，需要满足以下条件：合约状态有效，合约在起止日期内、地域、语言、符合请求的广告位、定向投放的GAID、各层级数据有效
** 代码计设
*** 根据slot id，通过index accessor获取到所有投放到该广告位的unit id
*** 根据unit id获取合约层级、账号层级、计划层级、idea层级的id
    在根据各层级id，获取各层级的数据，根据数据，进行过滤：
    | 层级     | 约束     | 条件                                                                                                                                                          |
    |----------+----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | 账号层级 | 地域     | country == request.country and ((country == india or contry == indonesia) and province == request.country)                                                    |
    | 账号层级 | 语言     | language == request.language                                                                                                                                  |
    | 合约层级 | 状态     | state == 1                                                                                                                                                    |
    | 合约层级 | 起止时间 | (sell_type == 1 and start_time <= current_time and end_time <= current_time) or (sell_type == 2 and start_time <= current_time and start_time < current_time) |
    | unit层级 | 频道定向 | (country != india and contry != indonesia) or ((country == india or contry == indonesia) and channel_id == request.channel_id)                                |
    | unit层级 | 语言定向 | language == request.language                                                                                                                                  |
    | unit层级 | GAID时间 | request.gaid in gaid set                                                                                                                                      |

* 开发中碰到的问题
** index如何使用的问题
*** id向local id转换
    GetIdeaLocalIdFrom

    //unit的地域如何来
    // get unit's regions
    std::string term = kChainPrefixUnitRegion + base::IntToString(unitid);
    scoped_ptr<adsindexing::DocIterator> doc_it(index.NewDocIterator(term, adsindexing::kUnigramTerm));
    if (doc_it.get() == NULL) continue;
    for (doc_it->Reset(); !doc_it->Done(); doc_it->Next()) {
      int32 local_id = doc_it->GetDocLocalId();
      if (local_id < 0 || !CheckDocIndexValid(index, local_id)) continue;
      uint32 region = index.GetIntAttr(kRegionIDSign, local_id, 0);
      if (FLAGS_enable_intl_hc) {
        int32 mode = index.GetIntAttr(kModeSign, local_id, 0);
        if (mode == 2) {
          unit_regions_exclude_map_[unitid].push_back(region);
          VLOG(1) << "exclude unitid:" << unitid << " regionid:" << region;
        } else {
          unit_regions_map_[unitid].push_back(region);
          VLOG(1) << "include unitid:" << unitid << " regionid:" << region;
        }
      } else {
        unit_regions_map_[unitid].push_back(region);
      }
    }

    //request的地域信息怎么来，怎么转成过滤中需要用的形式
  uint32 region_id = request->region_info().valid_region
  uint32 province_id = region_dict_->LogicProvinceId(region_id);
  uint32 city_id = region_dict_->LogicCityId(region_id);
  uint32 nation_id = region_dict_->NationID(region_id);


    //如何做过滤
    *regions = unit_regions_map_.at(unitid);
    for (int32 i = 0; i < (int32)regions->size(); i++) {
      if (province_region == regions->at(i)) return true;
      if (city_region == regions->at(i)) {
        VLOG(1) << "FillAndCheckUnitRegion city_region: " << city_region;
        return true;
      }
    }


* 需要修正的问题
** DONE index_accessor的函数定义
   CLOSED: [2017-07-03 一 15:34]
   应该返回一些信息的vector，而不是直接判断是否包含。例如：投放地域，投放语言等
   应该将需要返回的参数，传指针，而不是引用。
** DONE index_accessor里面对LocalID的计算，在brand_util.h里面已经有了
   CLOSED: [2017-07-03 一 15:34]
   认为不应该写成brand_util.h里面那样，将index_accessor里面封装的index暴露出去，感觉不对。
** DONE 需要加log
   CLOSED: [2017-07-04 二 10:36]
*** DONE 需要生成bs_log，加入到context，备notice log用
    CLOSED: [2017-07-04 二 10:36]
*** DONE 为了调试，需要将触发的unit，过滤的unit及原因，通过basic search的idea，需要记log
    CLOSED: [2017-07-04 二 10:36]
** DONE 需要在proto里面加入channel，需要加入channel过滤
   CLOSED: [2017-07-03 一 20:12]
** DONE 需要加入GAID过滤，需要和PM确认，哪些过滤是需要针对GAID做
   CLOSED: [2017-07-07 五 21:12]
   gaid是一种触发方式，和slot触发是与的方式，而不是或的方式
   需要去掉gaid过滤器，在index monitor中加入使用gaid触发
** DONE unit和idea截断
   CLOSED: [2017-07-08 六 15:24]
   避免数量过大时，处理时间过长，idea的截断，杨经已经加了
** DONE 日志优化
   CLOSED: [2017-07-08 六 15:24]
** DONE 确认region_id、channel_id、各层级id，到底是int32、uint32、int64？
   CLOSED: [2017-07-10 一 13:30]
   已确认各层级id，参考ad_info.h，即所有层级的id都是int64
   其他的id的类型，参考proto定义
** DONE make lint
   CLOSED: [2017-07-08 六 15:24]
** DONE 确认当unit查询不到region/language等信息时，是过滤掉，还是通过过滤？
   CLOSED: [2017-07-10 一 11:21]
   0.unit中无region、language信息，则是无该方面定向，即全投放
   1.request中无region、language等信息时，则只选取的unit，也必须无region、language定向
   2.unit中无region、channel信息时，则说明全投放，完全不做过滤
** DONE 将触发出的unit_list改为unit_set，避免放到里面两次
** DONE 进行channel过滤时，判断国家，用valid_region查询，还是使用valid_country
   CLOSED: [2017-07-11 二 16:49]
   已确认先做region过滤后，就直接用channel做过滤就可以了，没必要再判断一次国家
   CLOSED: [2017-07-11 二 08:53]
** DONE 弄好trace log，保证排查问题时，可以查到
   CLOSED: [2017-07-13 四 19:36]
** DONE 弄好监控，保证各类指标可以通过系统查询到
   CLOSED: [2017-07-27 四 18:41]
   parse_time、as_time、response_time，
** DONE 弄明白索引的mq和点击的feed back mq，能看懂其内容和
   CLOSED: [2017-07-27 四 18:41]
** DONE 结果缺少langingpage_url字段
   CLOSED: [2017-07-13 四 19:43]
   的确是少填充了response->turl字段，该字段使用idea索引中的“content”中的json字符串中，带"_url"的value填充
   landingpage_url (media server) => turl[0] (exchange server, .proto) => 
** DONE 测试环境了解
   CLOSED: [2017-07-27 四 18:41]
*** TODO 部署机器和目录的信息
    机器：11.251.208.9
    目录：/serving/brand_server
*** TODO MQ和tair的信息
    定义在:/serving/brand_server/config/server.flags
    直接查看测试机上，/serving/ad_server里面的MQ和tair的配置信息。
*** TODO 字典和静态索引的信息
    定义在:/serving/brand_server/config/server.flags
**** 测试环境索引
     索引的位置：/serving/huichuan_build_index/huichuan_brand/huichuan_brand/index
     生成方式： cd /serving/huichuan_build_index ; python vertical_run_all.py jobs/huichuan_brand/huichuan_brand/ 
     查询brand server的索引信息的curl为：
     curl "http://127.0.0.1:9180/object_info?cmd=term&terms=IDEA_ALL"
     curl "http://127.0.0.1:9180/object_info?cmd=term&terms=IDEA_ALL"
     curl "http://127.0.0.1:9189/object_info?cmd=term&terms=MEDIA_UNIT__14556184"
*** TODO 配置文件的整理和部署
    发现问题：报一个ｆｌａｇ重复定义：message_queue_servers
    app_frame.h -> headers.h -> components.h -> message_queue_client.h
    这个问题是由app_frame导致的，已由其负责人员修复。
*** TODO 判断ad_server在无广告的时候，还是否还填充SlotAd
    RecoAdsearcher::PackageResult() -- slot_ad_result_dispatch_
    ||
    RecoAdSearcher::
** 收尾工作
*** TODO 需要代码review完毕
    exchange server的code review地址：http://10.101.171.199:8189/317
    brand server的code review地址：http://10.101.171.199:8189/346
*** DONE /i18n_huichuan/exchange_server/api/exchange_server.proto需要上传
    CLOSED: [2017-07-06 四 16:17]
*** DONE /huichuan/include/public.h需要上传
    CLOSED: [2017-07-06 四 16:17]
*** TODO 修改的app_frame代码需要发布
    1.FLAGS_message_queue_list与IndexMonitor中定义重复了
*** 生成的配置文件/dict文件/data文件，需要上svn
*** 整理好上线用的配置文件。
*** 上传exchange server的代码和配置文件到svn
* 二期的工作
** 一次返回三天的广告，不需要记录返回的历史记录，每次都当做第一次请求即可
** 平台增加了分小时的投放功能
   1.平台会将该字段加到索引中，使用七个int，使用其低24位来存储一天的24小时
   2.sdk会发时区信息过来，时区信息是一个字符串，类似：”GMT +8“
   3.需要服务器自己去取UTC时间，再根据时区信息，转为request的当地时间，然后取判断是否在投放时间内。
    
